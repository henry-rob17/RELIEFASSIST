from __future__ import annotations

from pathlib import Path
import os
from datetime import date
from typing import List, Dict, Optional, Tuple

from dotenv import load_dotenv
from flask import (
    Flask,
    render_template,
    request,
    redirect,
    url_for,
    flash,
)
import mysql.connector
from mysql.connector import Error as MySQLError

# --------------------------------------------------------------------
# DB connection via .env
# --------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent
load_dotenv(BASE_DIR / ".env")

try:
    DB: mysql.connector.MySQLConnection | None = mysql.connector.connect(
        host=os.getenv("MYSQL_HOST", "localhost"),
        port=int(os.getenv("MYSQL_PORT", 3306)),
        user=os.getenv("MYSQL_USER", "root"),
        password=os.getenv("MYSQL_PW", ""),
        database=os.getenv("MYSQL_DB", "reliefassist_db"),
        autocommit=True,
    )
except MySQLError as exc:
    raise RuntimeError("❌ DB connect failed: " + str(exc)) from exc

app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET", "dev-key-change-me")

# --------------------------------------------------------------------
# Helper fns
# --------------------------------------------------------------------

def query(sql: str, params: tuple = ()) -> List[Dict]:
    cur = DB.cursor(dictionary=True)
    cur.execute(sql, params)
    rows = cur.fetchall()
    cur.close()
    return rows


def execute(sql: str, params: tuple = ()) -> None:
    cur = DB.cursor()
    cur.execute(sql, params)
    cur.close()


def centers() -> List[Tuple[int, str]]:
    return [(r["center_id"], r["name"]) for r in query("SELECT center_id, name FROM ReliefCenter ORDER BY name")]


def resources_master() -> List[Tuple[int, str]]:
    return [(r["resource_id"], r["resource_type"]) for r in query("SELECT resource_id, resource_type FROM Resource ORDER BY resource_type")]


def disasters_master() -> List[Tuple[int, str]]:
    return [(d["disaster_id"], d["name"]) for d in query("SELECT disaster_id, name FROM Disaster ORDER BY name")]


def volunteers_master() -> List[Tuple[int, str]]:
    return [
        (v["volunteer_id"], f"{v['first_name']} {v['last_name']}")
        for v in query("SELECT volunteer_id, first_name, last_name FROM Volunteer ORDER BY last_name")
    ]



# --------------------------------------------------------------------
# Routes – Disasters (unchanged)
# --------------------------------------------------------------------

@app.route("/")
def dashboard():
    rows = query(
        "SELECT disaster_id, name, location, start_date, status "
        "FROM Disaster ORDER BY start_date DESC LIMIT 10"
    )
    return render_template("dashboard.html", disasters=rows)


@app.route("/disasters")
def disasters():
    rows = query("SELECT * FROM Disaster ORDER BY disaster_id DESC")
    return render_template("disasters.html", disasters=rows)


@app.route("/disaster/new", methods=["GET", "POST"])
@app.route("/disaster/<int:disaster_id>/edit", methods=["GET", "POST"])
def disaster_form(disaster_id: int | None = None):
    if request.method == "POST":
        data = (
            request.form["name"],
            request.form["location"],
            request.form.get("magnitude"),
            request.form["start_date"],
            request.form.get("end_date"),
            request.form["status"],
            request.form.get("description"),
        )
        if disaster_id is None:
            execute(
                """INSERT INTO Disaster
                     (name, location, magnitude, start_date, end_date, status, description)
                     VALUES (%s,%s,%s,%s,%s,%s,%s)""",
                data,
            )
            flash("Disaster created!", "success")
        else:
            execute(
                """UPDATE Disaster SET
                       name=%s, location=%s, magnitude=%s, start_date=%s,
                       end_date=%s, status=%s, description=%s
                   WHERE disaster_id=%s""",
                data + (disaster_id,),
            )
            flash("Disaster updated!", "success")
        return redirect(url_for("disasters"))

    disaster = None
    if disaster_id:
        row = query("SELECT * FROM Disaster WHERE disaster_id=%s", (disaster_id,))
        disaster = row[0] if row else None
    return render_template("disaster_form.html", disaster=disaster, today=date.today())

# --------------------------------------------------------------------
# Routes – Resource inventory via CenterResource (unchanged)
# --------------------------------------------------------------------

@app.route("/resources")
def resources_list():
    rows = query(
        """
        SELECT cr.center_resource_id, rc.name AS center, r.resource_type,
               cr.quantity_on_hand, rc.capacity, rc.current_load
        FROM CenterResource cr
        JOIN ReliefCenter rc ON rc.center_id = cr.center_id
        JOIN Resource r     ON r.resource_id = cr.resource_id
        ORDER BY rc.name, r.resource_type
        """
    )
    return render_template("resources.html", resources=rows)


@app.route("/resource/new", methods=["GET", "POST"])
def resource_form():
    center_opts = centers()
    res_opts = resources_master()
    if request.method == "POST":
        execute(
            "INSERT INTO CenterResource (center_id, resource_id, quantity_on_hand) VALUES (%s,%s,%s)",
            (
                int(request.form["center_id"]),
                int(request.form["resource_id"]),
                int(request.form["quantity_on_hand"] or 0),
            ),
        )
        flash("Inventory line added!", "success")
        return redirect(url_for("resources_list"))

    return render_template("resource_form.html", centers=center_opts, resources=res_opts)

# --------------------------------------------------------------------
# Routes – TASKS slice
# --------------------------------------------------------------------

@app.route("/tasks")
def tasks():
    rows = query(
        """
        SELECT t.task_id, t.description, t.status, t.due_date,
               d.name   AS disaster,
               rc.name  AS center,
               COUNT(ta.assignment_id) AS volunteers
        FROM Task t
        LEFT JOIN Disaster d    ON d.disaster_id = t.disaster_id
        LEFT JOIN ReliefCenter rc ON rc.center_id = t.center_id
        LEFT JOIN TaskAssignment ta ON ta.task_id = t.task_id
        GROUP BY t.task_id
        ORDER BY t.due_date IS NULL, t.due_date
        """
    )
    return render_template("tasks.html", tasks=rows)


@app.route("/task/new", methods=["GET", "POST"])
@app.route("/task/<int:task_id>/edit", methods=["GET", "POST"])
def task_form(task_id: int | None = None):
    disaster_opts = disasters_master()
    center_opts = centers()
    volunteer_opts = volunteers_master()

    if request.method == "POST":
        data = (
            int(request.form["disaster_id"]),
            int(request.form["center_id"]) if request.form.get("center_id") else None,
            request.form["description"],
            request.form.get("due_date") or None,
            request.form["status"],
        )
        if task_id is None:
            execute(
                "INSERT INTO Task (disaster_id, center_id, description, due_date, status) VALUES (%s,%s,%s,%s,%s)",
                data,
            )
            task_id = DB.insert_id()  # get new PK
            flash("Task created!", "success")
        else:
            execute(
                "UPDATE Task SET disaster_id=%s, center_id=%s, description=%s, due_date=%s, status=%s WHERE task_id=%s",
                data + (task_id,),
            )
            execute("DELETE FROM TaskAssignment WHERE task_id=%s", (task_id,))
            flash("Task updated!", "success")

        # handle volunteer assignments
        for vid in request.form.getlist("volunteers"):
            execute(
                "INSERT INTO TaskAssignment (task_id, volunteer_id) VALUES (%s, %s)",
                (task_id, int(vid)),
            )
        return redirect(url_for("tasks"))

    # GET: load existing
    task = None
    assigned = []
    if task_id:
        res = query("SELECT * FROM Task WHERE task_id=%s", (task_id,))
        task = res[0] if res else None
        assigned = [row["volunteer_id"] for row in query("SELECT volunteer_id FROM TaskAssignment WHERE task_id=%s", (task_id,))]
    return render_template(
        "task_form.html",
        task=task,
        disasters=disaster_opts,
        centers=center_opts,
        volunteers=volunteer_opts,
        assigned=assigned,
        today=date.today(),
    )
    
    # --------------------------------------------------------------------
# Routes – VOLUNTEERS slice
# --------------------------------------------------------------------

@app.route("/volunteers")
def volunteers():
    rows = query(
        "SELECT volunteer_id, first_name, last_name, phone, skills FROM Volunteer ORDER BY last_name"
    )
    return render_template("volunteers.html", volunteers=rows)


@app.route("/volunteer/<int:vol_id>")
def volunteer_tasks(vol_id: int):
    # volunteer info
    vrow = query(
        "SELECT volunteer_id, CONCAT(first_name,' ',last_name) AS vname, phone, email, skills "
        "FROM Volunteer WHERE volunteer_id=%s",
        (vol_id,),
    )
    if not vrow:
        flash("Volunteer not found", "danger")
        return redirect(url_for("volunteers"))

    tasks = query(
        """
        SELECT t.task_id, t.description, t.due_date, t.status,
               d.name AS disaster,
               rc.name AS center
          FROM TaskAssignment ta
          JOIN Task t        ON t.task_id = ta.task_id
          LEFT JOIN Disaster d    ON d.disaster_id = t.disaster_id
          LEFT JOIN ReliefCenter rc ON rc.center_id = t.center_id
         WHERE ta.volunteer_id = %s
         ORDER BY t.due_date IS NULL, t.due_date
        """,
        (vol_id,),
    )
    return render_template("volunteer_tasks.html", volunteer=vrow[0], tasks=tasks)


# --------------------------------------------------------------------
# DONOR slice
# --------------------------------------------------------------------

@app.route("/donors")
def donors():
    rows = query(
        """
        SELECT d.donor_id,
               CONCAT(d.first_name,' ',d.last_name) AS donor,
               d.phone,
               COUNT(n.donation_id)          AS gifts,
               COALESCE(SUM(n.amount),0)     AS cash_total
          FROM Donor d
          LEFT JOIN Donation n ON n.donor_id = d.donor_id
         GROUP BY d.donor_id
         ORDER BY donor
        """
    )
    return render_template("donors.html", donors=rows)


@app.route("/donor/<int:donor_id>")
def donor_detail(donor_id: int):
    info = query(
        "SELECT CONCAT(first_name,' ',last_name) AS donor, phone, email FROM Donor WHERE donor_id=%s",
        (donor_id,),
    )
    if not info:
        flash("Donor not found", "danger")
        return redirect(url_for("donors"))

    donations = query(
        """
        SELECT n.donation_id, n.donation_type, n.amount, n.donation_date,
               COALESCE(SUM(da.amount_used),0)  AS used_cash,
               COALESCE(SUM(da.quantity),0)     AS allocated_qty
          FROM Donation n
          LEFT JOIN DonationAllocation da ON da.donation_id = n.donation_id
         WHERE n.donor_id = %s
         GROUP BY n.donation_id
         ORDER BY n.donation_date DESC
        """,
        (donor_id,),
    )
    return render_template("donor_detail.html", donor=info[0], donations=donations)




# --------------------------------------------------------------------
# Error handler
# --------------------------------------------------------------------

@app.errorhandler(404)
def not_found(_):
    return render_template("layout.html", content="<h2>404 – Page Not Found</h2>"), 404

#@app.error
